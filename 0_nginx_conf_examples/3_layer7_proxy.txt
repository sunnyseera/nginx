This setup will simulate multiple servers using docker and how we can use NGINX as a layer 7 
We will proxy and loadbalance 

https://github.com/hnasr/javascript_playground.git
cd javascript_playground
mv ../docker
cd ../ 
rm -rf javascript_playground
cd docker
docker build --tag nodeapp .

docker run -p 2222:9999 -e APPID=2222 -d nodeapp  <--runs on 2222 but listens on 9999 
docker run -p 3333:9999 -e APPID=3333 -d nodeapp
docker run -p 4444:9999 -e APPID=4444 -d nodeapp
docker run -p 5555:9999 -e APPID=5555 -d nodeapp

http://localhost:2222/
http://localhost:2222/app1 
http://localhost:2222/app2 
http://localhost:2222/admin

http://localhost:3333/
http://localhost:3333/app1 
http://localhost:3333/app2 
http://localhost:3333/admin

http://localhost:4444/
http://localhost:4444/app1 
http://localhost:4444/app2 
http://localhost:4444/admin

http://localhost:5555/
http://localhost:5555/app1 
http://localhost:5555/app2 
http://localhost:5555/admin


If someone goes to the main URL we want to proxy to the backend
Go to localhost in your browser and you will see the round robin loadbalancing

# If service nginx restart fails run 'nginx -s reload'  it will give better error message

####################################################################################

# BASIC EXAMPLE

http {

        # This will perform round robin loadbalancing
        upstream allbackend {
                #ip_hash;                   <---- Enable this to turn on sticky sessions
                server 127.0.0.1:2222;
                server 127.0.0.1:3333;
                server 127.0.0.1:4444;
                server 127.0.0.1:5555;
        }

        server {
        listen 80;
        location / {
                proxy_pass http://allbackend/;
    }
  }
}

events {}

# http://localhost/     <-- Round robin all 4 apps

####################################################################################
####################################################################################
####################################################################################

# MORE COMPLEX EXAMPLE

http {

        # This will perform round robin loadbalancing
        upstream allbackend {
                #ip_hash;                   <---- Enable this to turn on sticky sessions
                server 127.0.0.1:2222;
                server 127.0.0.1:3333;
                server 127.0.0.1:4444;
                server 127.0.0.1:5555;
        }

        upstream app1backend {
                #ip_hash;                   <---- Enable this to turn on sticky sessions
                server 127.0.0.1:2222;
                server 127.0.0.1:3333;
    }

        upstream app2backend {
                #ip_hash;                   <---- Enable this to turn on sticky sessions
                server 127.0.0.1:4444;
                server 127.0.0.1:5555;
    }

        server {
        listen 80;
        location / {
                proxy_pass http://allbackend/;
    }
    
        location /app1 {
                proxy_pass http://app1backend/;
    }

        location /app2  {
                proxy_pass http://app2backend/;
    }
  }
}


events {}

# http://localhost/     <-- Round robin all 4 apps 
# http://localhost/app1 <-- Round robin apps 1 + 2 
# http://localhost/app2 <-- Round robin apps 3 + 4

####################################################################################
